{"version":3,"file":"webbluetooth.umd.js","sources":["../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../src/helpers.ts","../src/dispatcher.ts","../src/adapter.ts","../node_modules/rollup-plugin-node-builtins/src/es6/os.js","../src/descriptor.ts","../src/characteristic.ts","../src/service.ts","../src/server.ts","../src/device.ts","../src/bluetooth.ts","../src/index.ts"],"sourcesContent":["'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * Known services enum\n */\nexport enum bluetoothServices {\n    \"alert_notification\" = 0x1811,\n    \"automation_io\" = 0x1815,\n    \"battery_service\" = 0x180F,\n    \"blood_pressure\" = 0x1810,\n    \"body_composition\" = 0x181B,\n    \"bond_management\" = 0x181E,\n    \"continuous_glucose_monitoring\" = 0x181F,\n    \"current_time\" = 0x1805,\n    \"cycling_power\" = 0x1818,\n    \"cycling_speed_and_cadence\" = 0x1816,\n    \"device_information\" = 0x180A,\n    \"environmental_sensing\" = 0x181A,\n    \"generic_access\" = 0x1800,\n    \"generic_attribute\" = 0x1801,\n    \"glucose\" = 0x1808,\n    \"health_thermometer\" = 0x1809,\n    \"heart_rate\" = 0x180D,\n    \"human_interface_device\" = 0x1812,\n    \"immediate_alert\" = 0x1802,\n    \"indoor_positioning\" = 0x1821,\n    \"internet_protocol_support\" = 0x1820,\n    \"link_loss\" = 0x1803,\n    \"location_and_navigation\" = 0x1819,\n    \"next_dst_change\" = 0x1807,\n    \"phone_alert_status\" = 0x180E,\n    \"pulse_oximeter\" = 0x1822,\n    \"reference_time_update\" = 0x1806,\n    \"running_speed_and_cadence\" = 0x1814,\n    \"scan_parameters\" = 0x1813,\n    \"tx_power\" = 0x1804,\n    \"user_data\" = 0x181C,\n    \"weight_scale\" = 0x181D\n}\n\n/**\n * Known characteristics enum\n */\nexport enum bluetoothCharacteristics {\n    \"aerobic_heart_rate_lower_limit\" = 0x2A7E,\n    \"aerobic_heart_rate_upper_limit\" = 0x2A84,\n    \"aerobic_threshold\" = 0x2A7F,\n    \"age\" = 0x2A80,\n    \"aggregate\" = 0x2A5A,\n    \"alert_category_id\" = 0x2A43,\n    \"alert_category_id_bit_mask\" = 0x2A42,\n    \"alert_level\" = 0x2A06,\n    \"alert_notification_control_point\" = 0x2A44,\n    \"alert_status\" = 0x2A3F,\n    \"altitude\" = 0x2AB3,\n    \"anaerobic_heart_rate_lower_limit\" = 0x2A81,\n    \"anaerobic_heart_rate_upper_limit\" = 0x2A82,\n    \"anaerobic_threshold\" = 0x2A83,\n    \"analog\" = 0x2A58,\n    \"apparent_wind_direction\" = 0x2A73,\n    \"apparent_wind_speed\" = 0x2A72,\n    \"gap.appearance\" = 0x2A01,\n    \"barometric_pressure_trend\" = 0x2AA3,\n    \"battery_level\" = 0x2A19,\n    \"blood_pressure_feature\" = 0x2A49,\n    \"blood_pressure_measurement\" = 0x2A35,\n    \"body_composition_feature\" = 0x2A9B,\n    \"body_composition_measurement\" = 0x2A9C,\n    \"body_sensor_location\" = 0x2A38,\n    \"bond_management_control_point\" = 0x2AA4,\n    \"bond_management_feature\" = 0x2AA5,\n    \"boot_keyboard_input_report\" = 0x2A22,\n    \"boot_keyboard_output_report\" = 0x2A32,\n    \"boot_mouse_input_report\" = 0x2A33,\n    \"gap.central_address_resolution_support\" = 0x2AA6,\n    \"cgm_feature\" = 0x2AA8,\n    \"cgm_measurement\" = 0x2AA7,\n    \"cgm_session_run_time\" = 0x2AAB,\n    \"cgm_session_start_time\" = 0x2AAA,\n    \"cgm_specific_ops_control_point\" = 0x2AAC,\n    \"cgm_status\" = 0x2AA9,\n    \"csc_feature\" = 0x2A5C,\n    \"csc_measurement\" = 0x2A5B,\n    \"current_time\" = 0x2A2B,\n    \"cycling_power_control_point\" = 0x2A66,\n    \"cycling_power_feature\" = 0x2A65,\n    \"cycling_power_measurement\" = 0x2A63,\n    \"cycling_power_vector\" = 0x2A64,\n    \"database_change_increment\" = 0x2A99,\n    \"date_of_birth\" = 0x2A85,\n    \"date_of_threshold_assessment\" = 0x2A86,\n    \"date_time\" = 0x2A08,\n    \"day_date_time\" = 0x2A0A,\n    \"day_of_week\" = 0x2A09,\n    \"descriptor_value_changed\" = 0x2A7D,\n    \"gap.device_name\" = 0x2A00,\n    \"dew_point\" = 0x2A7B,\n    \"digital\" = 0x2A56,\n    \"dst_offset\" = 0x2A0D,\n    \"elevation\" = 0x2A6C,\n    \"email_address\" = 0x2A87,\n    \"exact_time_256\" = 0x2A0C,\n    \"fat_burn_heart_rate_lower_limit\" = 0x2A88,\n    \"fat_burn_heart_rate_upper_limit\" = 0x2A89,\n    \"firmware_revision_string\" = 0x2A26,\n    \"first_name\" = 0x2A8A,\n    \"five_zone_heart_rate_limits\" = 0x2A8B,\n    \"floor_number\" = 0x2AB2,\n    \"gender\" = 0x2A8C,\n    \"glucose_feature\" = 0x2A51,\n    \"glucose_measurement\" = 0x2A18,\n    \"glucose_measurement_context\" = 0x2A34,\n    \"gust_factor\" = 0x2A74,\n    \"hardware_revision_string\" = 0x2A27,\n    \"heart_rate_control_point\" = 0x2A39,\n    \"heart_rate_max\" = 0x2A8D,\n    \"heart_rate_measurement\" = 0x2A37,\n    \"heat_index\" = 0x2A7A,\n    \"height\" = 0x2A8E,\n    \"hid_control_point\" = 0x2A4C,\n    \"hid_information\" = 0x2A4A,\n    \"hip_circumference\" = 0x2A8F,\n    \"humidity\" = 0x2A6F,\n    \"ieee_11073-20601_regulatory_certification_data_list\" = 0x2A2A,\n    \"indoor_positioning_configuration\" = 0x2AAD,\n    \"intermediate_blood_pressure\" = 0x2A36,\n    \"intermediate_temperature\" = 0x2A1E,\n    \"irradiance\" = 0x2A77,\n    \"language\" = 0x2AA2,\n    \"last_name\" = 0x2A90,\n    \"latitude\" = 0x2AAE,\n    \"ln_control_point\" = 0x2A6B,\n    \"ln_feature\" = 0x2A6A,\n    \"local_east_coordinate.xml\" = 0x2AB1,\n    \"local_north_coordinate\" = 0x2AB0,\n    \"local_time_information\" = 0x2A0F,\n    \"location_and_speed\" = 0x2A67,\n    \"location_name\" = 0x2AB5,\n    \"longitude\" = 0x2AAF,\n    \"magnetic_declination\" = 0x2A2C,\n    \"magnetic_flux_density_2D\" = 0x2AA0,\n    \"magnetic_flux_density_3D\" = 0x2AA1,\n    \"manufacturer_name_string\" = 0x2A29,\n    \"maximum_recommended_heart_rate\" = 0x2A91,\n    \"measurement_interval\" = 0x2A21,\n    \"model_number_string\" = 0x2A24,\n    \"navigation\" = 0x2A68,\n    \"new_alert\" = 0x2A46,\n    \"gap.peripheral_preferred_connection_parameters\" = 0x2A04,\n    \"gap.peripheral_privacy_flag\" = 0x2A02,\n    \"plx_continuous_measurement\" = 0x2A5F,\n    \"plx_features\" = 0x2A60,\n    \"plx_spot_check_measurement\" = 0x2A5E,\n    \"pnp_id\" = 0x2A50,\n    \"pollen_concentration\" = 0x2A75,\n    \"position_quality\" = 0x2A69,\n    \"pressure\" = 0x2A6D,\n    \"protocol_mode\" = 0x2A4E,\n    \"rainfall\" = 0x2A78,\n    \"gap.reconnection_address\" = 0x2A03,\n    \"record_access_control_point\" = 0x2A52,\n    \"reference_time_information\" = 0x2A14,\n    \"report\" = 0x2A4D,\n    \"report_map\" = 0x2A4B,\n    \"resting_heart_rate\" = 0x2A92,\n    \"ringer_control_point\" = 0x2A40,\n    \"ringer_setting\" = 0x2A41,\n    \"rsc_feature\" = 0x2A54,\n    \"rsc_measurement\" = 0x2A53,\n    \"sc_control_point\" = 0x2A55,\n    \"scan_interval_window\" = 0x2A4F,\n    \"scan_refresh\" = 0x2A31,\n    \"sensor_location\" = 0x2A5D,\n    \"serial_number_string\" = 0x2A25,\n    \"gatt.service_changed\" = 0x2A05,\n    \"software_revision_string\" = 0x2A28,\n    \"sport_type_for_aerobic_and_anaerobic_thresholds\" = 0x2A93,\n    \"supported_new_alert_category\" = 0x2A47,\n    \"supported_unread_alert_category\" = 0x2A48,\n    \"system_id\" = 0x2A23,\n    \"temperature\" = 0x2A6E,\n    \"temperature_measurement\" = 0x2A1C,\n    \"temperature_type\" = 0x2A1D,\n    \"three_zone_heart_rate_limits\" = 0x2A94,\n    \"time_accuracy\" = 0x2A12,\n    \"time_source\" = 0x2A13,\n    \"time_update_control_point\" = 0x2A16,\n    \"time_update_state\" = 0x2A17,\n    \"time_with_dst\" = 0x2A11,\n    \"time_zone\" = 0x2A0E,\n    \"true_wind_direction\" = 0x2A71,\n    \"true_wind_speed\" = 0x2A70,\n    \"two_zone_heart_rate_limit\" = 0x2A95,\n    \"tx_power_level\" = 0x2A07,\n    \"uncertainty\" = 0x2AB4,\n    \"unread_alert_status\" = 0x2A45,\n    \"user_control_point\" = 0x2A9F,\n    \"user_index\" = 0x2A9A,\n    \"uv_index\" = 0x2A76,\n    \"vo2_max\" = 0x2A96,\n    \"waist_circumference\" = 0x2A97,\n    \"weight\" = 0x2A98,\n    \"weight_measurement\" = 0x2A9D,\n    \"weight_scale_feature\" = 0x2A9E,\n    \"wind_chill\" = 0x2A79\n}\n\n/**\n * Known descriptors enum\n */\nexport enum bluetoothDescriptors {\n    \"gatt.characteristic_extended_properties\" = 0x2900,\n    \"gatt.characteristic_user_description\" = 0x2901,\n    \"gatt.client_characteristic_configuration\" = 0x2902,\n    \"gatt.server_characteristic_configuration\" = 0x2903,\n    \"gatt.characteristic_presentation_format\" = 0x2904,\n    \"gatt.characteristic_aggregate_format\" = 0x2905,\n    \"valid_range\" = 0x2906,\n    \"external_report_reference\" = 0x2907,\n    \"report_reference\" = 0x2908,\n    \"number_of_digitals\" = 0x2909,\n    \"value_trigger_setting\" = 0x290A,\n    \"es_configuration\" = 0x290B,\n    \"es_measurement\" = 0x290C,\n    \"es_trigger_setting\" = 0x290D,\n    \"time_trigger_setting\" = 0x290E\n}\n\n/**\n * Gets a canonical UUID from a partial UUID in string or hex format\n * @param uuid The partial UUID\n * @returns canonical UUID\n */\nexport function getCanonicalUUID(uuid: string | number): string {\n    if (typeof uuid === \"number\") uuid = uuid.toString(16);\n    uuid = uuid.toLowerCase();\n    if (uuid.length <= 8) uuid = (\"00000000\" + uuid).slice(-8) + \"-0000-1000-8000-00805f9b34fb\";\n    if (uuid.length === 32) uuid = uuid.match(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/).splice(1).join(\"-\");\n    return uuid;\n}\n\n/**\n * Gets a canonical service UUID from a known service name or partial UUID in string or hex format\n * @param service The known service name\n * @returns canonical UUID\n */\nexport function getServiceUUID(service: string | number): string {\n    // Check for string as enums also allow a reverse lookup which will match any numbers passed in\n    if (typeof service === \"string\" && bluetoothServices[service]) {\n        service = bluetoothServices[service];\n    }\n\n    return getCanonicalUUID(service);\n}\n\n/**\n * Gets a canonical characteristic UUID from a known characteristic name or partial UUID in string or hex format\n * @param characteristic The known characteristic name\n * @returns canonical UUID\n */\nexport function getCharacteristicUUID(characteristic: string | number): string {\n    // Check for string as enums also allow a reverse lookup which will match any numbers passed in\n    if (typeof characteristic === \"string\" && bluetoothCharacteristics[characteristic]) {\n        characteristic = bluetoothCharacteristics[characteristic];\n    }\n\n    return getCanonicalUUID(characteristic);\n}\n\n/**\n * Gets a canonical descriptor UUID from a known descriptor name or partial UUID in string or hex format\n * @param descriptor The known descriptor name\n * @returns canonical UUID\n */\nexport function getDescriptorUUID(descriptor: string | number): string {\n    // Check for string as enums also allow a reverse lookup which will match any numbers passed in\n    if (typeof descriptor === \"string\" && bluetoothDescriptors[descriptor]) {\n        descriptor = bluetoothDescriptors[descriptor];\n    }\n\n    return getCanonicalUUID(descriptor);\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter {\n\n    // tslint:disable-next-line:array-type\n    public addEventListener(event: string | symbol, listener: (...args: any[]) => void) {\n        return super.addListener(event, listener);\n    }\n\n    // tslint:disable-next-line:array-type\n    public removeEventListener(event: string | symbol, listener: (...args: any[]) => void) {\n        return super.removeListener(event, listener);\n    }\n\n    public dispatchEvent(event: string | symbol, value?: any) {\n        return super.emit(event, {\n            type: event,\n            target: this,\n            value: value\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { platform } from \"os\";\nimport { EventEmitter } from \"events\";\nimport { getCanonicalUUID } from \"./helpers\";\nimport { BluetoothDevice } from \"./device\";\nimport { BluetoothRemoteGATTService } from \"./service\";\nimport { BluetoothRemoteGATTDescriptor } from \"./descriptor\";\nimport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nimport * as noble from \"@abandonware/noble\";\n\n/**\n * @hidden\n */\nexport interface Adapter extends EventEmitter {\n    getEnabled: (completeFn: (enabled: boolean) => void) => void;\n    startScan: (serviceUUIDs: Array<string>, foundFn: (device: Partial<BluetoothDevice>) => void, completeFn?: () => void, errorFn?: (errorMsg: string) => void) => void;\n    stopScan: (errorFn?: (errorMsg: string) => void) => void;\n    connect: (handle: string, connectFn: () => void, disconnectFn: () => void,\terrorFn?: (errorMsg: string) => void) => void;\n    disconnect: (handle: string, errorFn?: (errorMsg: string) => void) => void;\n    discoverServices: (handle: string, serviceUUIDs: Array<string>, completeFn: (services: Array<Partial<BluetoothRemoteGATTService>>) => void, errorFn?: (errorMsg: string) => void) => void;\n    discoverIncludedServices: (handle: string, serviceUUIDs: Array<string>, completeFn: (services: Array<Partial<BluetoothRemoteGATTService>>) => void, errorFn?: (errorMsg: string) => void) => void;\n    discoverCharacteristics: (handle: string, characteristicUUIDs: Array<string>, completeFn: (characteristics: Array<Partial<BluetoothRemoteGATTCharacteristic>>) => void, errorFn?: (errorMsg: string) => void) => void;\n    discoverDescriptors: (handle: string, descriptorUUIDs: Array<string>, completeFn: (descriptors: Array<Partial<BluetoothRemoteGATTDescriptor>>) => void, errorFn?: (errorMsg: string) => void) => void;\n    readCharacteristic: (handle: string, completeFn: (value: DataView) => void, errorFn?: (errorMsg: string) => void) => void;\n    writeCharacteristic: (handle: string, value: DataView, completeFn?: () => void, errorFn?: (errorMsg: string) => void) => void;\n    enableNotify: (handle: string, notifyFn: () => void, completeFn?: () => void, errorFn?: (errorMsg: string) => void) => void;\n    disableNotify: (handle: string, completeFn?: () => void, errorFn?: (errorMsg: string) => void) => void;\n    readDescriptor: (handle: string, completeFn: (value: DataView) => void, errorFn?: (errorMsg: string) => void) => void;\n    writeDescriptor: (handle: string, value: DataView, completeFn?: () => void, errorFn?: (errorMsg: string) => void) => void;\n}\n\n/**\n * @hidden\n */\nexport class NobleAdapter extends EventEmitter implements Adapter {\n\n    public static EVENT_ENABLED: string = \"enabledchanged\";\n\n    private deviceHandles: {} = {};\n    private serviceHandles: {} = {};\n    private characteristicHandles: {} = {};\n    private descriptorHandles: {} = {};\n    private charNotifies: {} = {};\n    private discoverFn: (device: noble.Peripheral) => void = null;\n    private initialised: boolean = false;\n    private enabled: boolean = false;\n    private os: string = platform();\n\n    constructor() {\n        super();\n        this.enabled = this.state;\n        noble.on(\"stateChange\", () => {\n            if (this.enabled !== this.state) {\n                this.enabled = this.state;\n                this.emit(NobleAdapter.EVENT_ENABLED, this.enabled);\n            }\n        });\n    }\n\n    private get state(): boolean {\n        return (noble.state === \"poweredOn\");\n    }\n\n    private init(completeFn: () => any): void {\n        if (this.initialised) return completeFn();\n        noble.on(\"discover\", deviceInfo => {\n            if (this.discoverFn) this.discoverFn(deviceInfo);\n        });\n        this.initialised = true;\n        completeFn();\n    }\n\n    private checkForError(errorFn, continueFn?, delay?: number) {\n        return function(error) {\n            if (error) errorFn(error);\n            else if (typeof continueFn === \"function\") {\n                const args = [].slice.call(arguments, 1);\n                if (delay === null) continueFn.apply(this, args);\n                else setTimeout(() => continueFn.apply(this, args), delay);\n            }\n        };\n    }\n\n    private bufferToDataView(buffer: Buffer): DataView {\n        // Buffer to ArrayBuffer\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private dataViewToBuffer(dataView: DataView): Buffer {\n        // DataView to TypedArray\n        const typedArray = new Uint8Array(dataView.buffer);\n        return new Buffer(typedArray);\n    }\n\n    private validDevice(deviceInfo: noble.Peripheral, serviceUUIDs: Array<string>): boolean {\n        if (serviceUUIDs.length === 0) {\n            // Match any device\n            return true;\n        }\n\n        if (!deviceInfo.advertisement.serviceUuids) {\n            // No advertised services, no match\n            return false;\n        }\n\n        const advertisedUUIDs = deviceInfo.advertisement.serviceUuids.map(serviceUUID => {\n            return getCanonicalUUID(serviceUUID);\n        });\n\n        return serviceUUIDs.some(serviceUUID => {\n            // An advertised UUID matches our search UUIDs\n            return (advertisedUUIDs.indexOf(serviceUUID) >= 0);\n        });\n    }\n\n    private deviceToBluetoothDevice(deviceInfo): Partial<BluetoothDevice> {\n        const deviceID = (deviceInfo.address && deviceInfo.address !== \"unknown\") ? deviceInfo.address : deviceInfo.id;\n\n        const serviceUUIDs = [];\n        if (deviceInfo.advertisement.serviceUuids) {\n            deviceInfo.advertisement.serviceUuids.forEach(serviceUUID => {\n                serviceUUIDs.push(getCanonicalUUID(serviceUUID));\n            });\n        }\n\n        const manufacturerData = new Map();\n        if (deviceInfo.advertisement.manufacturerData) {\n            // First 2 bytes are 16-bit company identifier\n            const company = deviceInfo.advertisement.manufacturerData.readUInt16LE(0);\n\n            // Remove company ID\n            const buffer = deviceInfo.advertisement.manufacturerData.slice(2);\n            manufacturerData.set((\"0000\" + company.toString(16)).slice(-4), this.bufferToDataView(buffer));\n        }\n\n        const serviceData = new Map();\n        if (deviceInfo.advertisement.serviceData) {\n            deviceInfo.advertisement.serviceData.forEach(serviceAdvert => {\n                serviceData.set(getCanonicalUUID(serviceAdvert.uuid), this.bufferToDataView(serviceAdvert.data));\n            });\n        }\n\n        return {\n            id: deviceID,\n            name: deviceInfo.advertisement.localName,\n            _serviceUUIDs: serviceUUIDs,\n            adData: {\n                rssi: deviceInfo.rssi,\n                txPower: deviceInfo.advertisement.txPowerLevel,\n                serviceData: serviceData,\n                manufacturerData: manufacturerData\n            }\n        };\n    }\n\n    public getEnabled(completeFn: (enabled: boolean) => void) {\n        function stateCB() {\n            completeFn(this.state);\n        }\n\n        if (noble.state === \"unknown\" || noble.state === \"poweredOff\") {\n            // tslint:disable-next-line:no-string-literal\n            noble[\"once\"](\"stateChange\", stateCB.bind(this));\n        } else {\n            stateCB.call(this);\n        }\n    }\n\n    public startScan(serviceUUIDs: Array<string>, foundFn: (device: Partial<BluetoothDevice>) => void, completeFn?: () => void, errorFn?: (errorMsg: string) => void): void {\n\n        this.discoverFn = deviceInfo => {\n            if (this.validDevice(deviceInfo, serviceUUIDs)) {\n                const device = this.deviceToBluetoothDevice(deviceInfo);\n\n                if (!this.deviceHandles[device.id]) {\n                    this.deviceHandles[device.id] = deviceInfo;\n                    // Only call the found function the first time we find a valid device\n                    foundFn(device);\n                }\n            }\n        };\n\n        this.init(() => {\n            this.deviceHandles = {};\n            function stateCB() {\n                if (this.state === true) {\n                    // Noble doesn't correctly match short and canonical UUIDs on Linux, so we need to check ourselves\n                    // Continually scan to pick up all advertised UUIDs\n                    noble.startScanning([], true, this.checkForError(errorFn, completeFn));\n                } else {\n                    errorFn(\"adapter not enabled\");\n                }\n            }\n\n            if (noble.state === \"unknown\" || noble.state === \"poweredOff\") {\n                // tslint:disable-next-line:no-string-literal\n                noble[\"once\"](\"stateChange\", stateCB.bind(this));\n            } else {\n                stateCB.call(this);\n            }\n        });\n    }\n\n    public stopScan(_errorFn?: (errorMsg: string) => void): void {\n        this.discoverFn = null;\n        noble.stopScanning();\n    }\n\n    public connect(handle: string, connectFn: () => void, disconnectFn: () => void, errorFn?: (errorMsg: string) => void): void {\n        const baseDevice = this.deviceHandles[handle];\n        baseDevice.removeAllListeners(\"connect\");\n        baseDevice.removeAllListeners(\"disconnect\");\n        baseDevice.once(\"connect\", connectFn);\n        baseDevice.once(\"disconnect\", () => {\n            this.serviceHandles = {};\n            this.characteristicHandles = {};\n            this.descriptorHandles = {};\n            this.charNotifies = {};\n            disconnectFn();\n        });\n        baseDevice.connect(this.checkForError(errorFn));\n    }\n\n    public disconnect(handle: string, errorFn?: (errorMsg: string) => void): void {\n        const baseDevice = this.deviceHandles[handle];\n        baseDevice.disconnect(this.checkForError(errorFn));\n    }\n\n    public discoverServices(handle: string, serviceUUIDs: Array<string>, completeFn: (services: Array<Partial<BluetoothRemoteGATTService>>) => void, errorFn?: (errorMsg: string) => void): void {\n        const baseDevice = this.deviceHandles[handle];\n        baseDevice.discoverServices([], this.checkForError(errorFn, services => {\n            const discovered = [];\n            services.forEach(serviceInfo => {\n                const serviceUUID = getCanonicalUUID(serviceInfo.uuid);\n\n                if (serviceUUIDs.length === 0 || serviceUUIDs.indexOf(serviceUUID) >= 0) {\n                    if (!this.serviceHandles[serviceUUID]) this.serviceHandles[serviceUUID] = serviceInfo;\n\n                    discovered.push({\n                        uuid: serviceUUID,\n                        primary: true\n                    });\n                }\n            });\n\n            completeFn(discovered);\n        }));\n    }\n\n    public discoverIncludedServices(handle: string, serviceUUIDs: Array<string>, completeFn: (services: Array<Partial<BluetoothRemoteGATTService>>) => void, errorFn?: (errorMsg: string) => void): void {\n        const serviceInfo = this.serviceHandles[handle];\n        serviceInfo.discoverIncludedServices([], this.checkForError(errorFn, services => {\n\n            const discovered = [];\n            services.forEach(service => {\n                const serviceUUID = getCanonicalUUID(service.uuid);\n\n                if (serviceUUIDs.length === 0 || serviceUUIDs.indexOf(serviceUUID) >= 0) {\n                    if (!this.serviceHandles[serviceUUID]) this.serviceHandles[serviceUUID] = service;\n\n                    discovered.push({\n                        uuid: serviceUUID,\n                        primary: false\n                    });\n                }\n            }, this);\n\n            completeFn(discovered);\n        }));\n    }\n\n    public discoverCharacteristics(handle: string, characteristicUUIDs: Array<string>, completeFn: (characteristics: Array<Partial<BluetoothRemoteGATTCharacteristic>>) => void, errorFn?: (errorMsg: string) => void): void {\n        const serviceInfo = this.serviceHandles[handle];\n        serviceInfo.discoverCharacteristics([], this.checkForError(errorFn, characteristics => {\n\n            const discovered = [];\n            characteristics.forEach(characteristicInfo => {\n                const charUUID = getCanonicalUUID(characteristicInfo.uuid);\n\n                if (characteristicUUIDs.length === 0 || characteristicUUIDs.indexOf(charUUID) >= 0) {\n                    if (!this.characteristicHandles[charUUID]) this.characteristicHandles[charUUID] = characteristicInfo;\n\n                    discovered.push({\n                        uuid: charUUID,\n                        properties: {\n                            broadcast:                  (characteristicInfo.properties.indexOf(\"broadcast\") >= 0),\n                            read:                       (characteristicInfo.properties.indexOf(\"read\") >= 0),\n                            writeWithoutResponse:       (characteristicInfo.properties.indexOf(\"writeWithoutResponse\") >= 0),\n                            write:                      (characteristicInfo.properties.indexOf(\"write\") >= 0),\n                            notify:                     (characteristicInfo.properties.indexOf(\"notify\") >= 0),\n                            indicate:                   (characteristicInfo.properties.indexOf(\"indicate\") >= 0),\n                            authenticatedSignedWrites:  (characteristicInfo.properties.indexOf(\"authenticatedSignedWrites\") >= 0),\n                            reliableWrite:              (characteristicInfo.properties.indexOf(\"reliableWrite\") >= 0),\n                            writableAuxiliaries:        (characteristicInfo.properties.indexOf(\"writableAuxiliaries\") >= 0)\n                        }\n                    });\n\n                    characteristicInfo.on(\"data\", (data, isNotification) => {\n                        if (isNotification === true && typeof this.charNotifies[charUUID] === \"function\") {\n                            const dataView = this.bufferToDataView(data);\n                            this.charNotifies[charUUID](dataView);\n                        }\n                    });\n                }\n            }, this);\n\n            completeFn(discovered);\n        }));\n    }\n\n    public discoverDescriptors(handle: string, descriptorUUIDs: Array<string>, completeFn: (descriptors: Array<Partial<BluetoothRemoteGATTDescriptor>>) => void, errorFn?: (errorMsg: string) => void): void {\n        const characteristicInfo = this.characteristicHandles[handle];\n        characteristicInfo.discoverDescriptors(this.checkForError(errorFn, descriptors => {\n\n            const discovered = [];\n            descriptors.forEach(descriptorInfo => {\n                const descUUID = getCanonicalUUID(descriptorInfo.uuid);\n\n                if (descriptorUUIDs.length === 0 || descriptorUUIDs.indexOf(descUUID) >= 0) {\n                    const descHandle = characteristicInfo.uuid + \"-\" + descriptorInfo.uuid;\n                    if (!this.descriptorHandles[descHandle]) this.descriptorHandles[descHandle] = descriptorInfo;\n\n                    discovered.push({\n                        uuid: descUUID\n                    });\n                }\n            }, this);\n\n            completeFn(discovered);\n        }));\n    }\n\n    public readCharacteristic(handle: string, completeFn: (value: DataView) => void, errorFn?: (errorMsg: string) => void): void {\n        this.characteristicHandles[handle].read(this.checkForError(errorFn, data => {\n            const dataView = this.bufferToDataView(data);\n            completeFn(dataView);\n        }));\n    }\n\n    public writeCharacteristic(handle: string, value: DataView, completeFn?: () => void, errorFn?: (errorMsg: string) => void): void {\n        const buffer = this.dataViewToBuffer(value);\n        const characteristic = this.characteristicHandles[handle];\n\n        // writeWithoutResponse and authenticatedSignedWrites don't require a response\n        const withoutResponse = characteristic.properties.indexOf(\"writeWithoutResponse\") >= 0\n                             || characteristic.properties.indexOf(\"authenticatedSignedWrites\") >= 0;\n\n        // Add a small delay for writing without response when not on MacOS\n        const delay = (this.os !== \"darwin\" && withoutResponse) ? 25 : null;\n\n        characteristic.write(buffer, withoutResponse, this.checkForError(errorFn, completeFn, delay));\n    }\n\n    public enableNotify(handle: string, notifyFn: (value: DataView) => void, completeFn?: () => void, errorFn?: (errorMsg: string) => void): void {\n        if (this.charNotifies[handle]) {\n            this.charNotifies[handle] = notifyFn;\n            return completeFn();\n        }\n        this.characteristicHandles[handle].once(\"notify\", state => {\n            if (state !== true) return errorFn(\"notify failed to enable\");\n            this.charNotifies[handle] = notifyFn;\n            completeFn();\n        });\n        this.characteristicHandles[handle].notify(true, this.checkForError(errorFn));\n    }\n\n    public disableNotify(handle: string, completeFn?: () => void, errorFn?: (errorMsg: string) => void): void {\n        if (!this.charNotifies[handle]) {\n            return completeFn();\n        }\n        this.characteristicHandles[handle].once(\"notify\", state => {\n            if (state !== false) return errorFn(\"notify failed to disable\");\n            if (this.charNotifies[handle]) delete this.charNotifies[handle];\n            completeFn();\n        });\n        this.characteristicHandles[handle].notify(false, this.checkForError(errorFn));\n    }\n\n    public readDescriptor(handle: string, completeFn: (value: DataView) => void, errorFn?: (errorMsg: string) => void): void {\n        this.descriptorHandles[handle].readValue(this.checkForError(errorFn, data => {\n            const dataView = this.bufferToDataView(data);\n            completeFn(dataView);\n        }));\n    }\n\n    public writeDescriptor(handle: string, value: DataView, completeFn?: () => void, errorFn?: (errorMsg: string) => void): void {\n        const buffer = this.dataViewToBuffer(value);\n        this.descriptorHandles[handle].writeValue(buffer, this.checkForError(errorFn, completeFn));\n    }\n}\n\n/**\n * @hidden\n */\nexport const adapter = new NobleAdapter();\n","/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 CoderPuppy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nvar _endianness;\nexport function endianness() {\n  if (typeof _endianness === 'undefined') {\n    var a = new ArrayBuffer(2);\n    var b = new Uint8Array(a);\n    var c = new Uint16Array(a);\n    b[0] = 1;\n    b[1] = 2;\n    if (c[0] === 258) {\n      _endianness = 'BE';\n    } else if (c[0] === 513){\n      _endianness = 'LE';\n    } else {\n      throw new Error('unable to figure out endianess');\n    }\n  }\n  return _endianness;\n}\n\nexport function hostname() {\n  if (typeof global.location !== 'undefined') {\n    return global.location.hostname\n  } else return '';\n}\n\nexport function loadavg() {\n  return [];\n}\n\nexport function uptime() {\n  return 0;\n}\n\nexport function freemem() {\n  return Number.MAX_VALUE;\n}\n\nexport function totalmem() {\n  return Number.MAX_VALUE;\n}\n\nexport function cpus() {\n  return [];\n}\n\nexport function type() {\n  return 'Browser';\n}\n\nexport function release () {\n  if (typeof global.navigator !== 'undefined') {\n    return global.navigator.appVersion;\n  }\n  return '';\n}\n\nexport function networkInterfaces(){}\nexport function getNetworkInterfaces(){}\n\nexport function arch() {\n  return 'javascript';\n}\n\nexport function platform() {\n  return 'browser';\n}\n\nexport function tmpDir() {\n  return '/tmp';\n}\nexport var tmpdir = tmpDir;\n\nexport var EOL = '\\n';\nexport default {\n  EOL: EOL,\n  tmpdir: tmpdir,\n  tmpDir: tmpDir,\n  networkInterfaces:networkInterfaces,\n  getNetworkInterfaces: getNetworkInterfaces,\n  release: release,\n  type: type,\n  cpus: cpus,\n  totalmem: totalmem,\n  freemem: freemem,\n  uptime: uptime,\n  loadavg: loadavg,\n  hostname: hostname,\n  endianness: endianness,\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Descriptor class\n */\nexport class BluetoothRemoteGATTDescriptor {\n\n    /**\n     * The characteristic the descriptor is related to\n     */\n    public readonly characteristic: BluetoothRemoteGATTCharacteristic = null;\n\n    /**\n     * The unique identifier of the descriptor\n     */\n    public readonly uuid: string = null;\n\n    private _value: DataView = null;\n    /**\n     * The value of the descriptor\n     */\n    public get value(): DataView {\n        return this._value;\n    }\n\n    private handle: string = null;\n\n    /**\n     * Descriptor constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTDescriptor>) {\n        this.characteristic = init.characteristic;\n        this.uuid = init.uuid;\n        this._value = init.value;\n\n        this.handle = `${this.characteristic.uuid}-${this.uuid}`;\n    }\n\n    /**\n     * Gets the value of the descriptor\n     * @returns Promise containing the value\n     */\n    public readValue(): Promise<DataView> {\n        return new Promise((resolve, reject) =>  {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readDescriptor(this.handle, dataView => {\n                this._value = dataView;\n                resolve(dataView);\n            }, error => {\n                reject(`readValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Updates the value of the descriptor\n     * @param value The value to write\n     */\n    public writeValue(value: ArrayBuffer | ArrayBufferView): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.characteristic.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n                return (source as ArrayBufferView).buffer !== undefined;\n            }\n\n            const arrayBuffer = isView(value) ? value.buffer : value;\n            const dataView = new DataView(arrayBuffer);\n\n            adapter.writeDescriptor(this.handle, dataView, () => {\n                this._value = dataView;\n                resolve();\n            }, error => {\n                reject(`writeValue error: ${error}`);\n            });\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { BluetoothRemoteGATTService } from \"./service\";\nimport { BluetoothRemoteGATTDescriptor } from \"./descriptor\";\nimport { getDescriptorUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Characteristic Properties interface\n */\nexport interface BluetoothCharacteristicProperties {\n    /**\n     * Broadcast property\n     */\n    broadcast: boolean;\n    /**\n     * Read property\n     */\n    read: boolean;\n    /**\n     * Write without response property\n     */\n    writeWithoutResponse: boolean;\n    /**\n     * Write property\n     */\n    write: boolean;\n    /**\n     * Notify property\n     */\n    notify: boolean;\n    /**\n     * Indicate property\n     */\n    indicate: boolean;\n    /**\n     * Authenticated signed writes property\n     */\n    authenticatedSignedWrites: boolean;\n    /**\n     * Reliable write property\n     */\n    reliableWrite: boolean;\n    /**\n     * Writable auxiliaries property\n     */\n    writableAuxiliaries: boolean;\n}\n\n/**\n * Bluetooth Remote GATT Characteristic class\n */\nexport class BluetoothRemoteGATTCharacteristic extends EventDispatcher {\n\n    /**\n     * Characteristic Value Changed event\n     * @event\n     */\n    public static EVENT_CHANGED: string = \"characteristicvaluechanged\";\n\n    /**\n     * The service the characteristic is related to\n     */\n    public readonly service: BluetoothRemoteGATTService = null;\n\n    /**\n     * The unique identifier of the characteristic\n     */\n    public readonly uuid = null;\n\n    /**\n     * The properties of the characteristic\n     */\n    public readonly properties: BluetoothCharacteristicProperties;\n\n    private _value: DataView = null;\n    /**\n     * The value of the characteristic\n     */\n    public get value(): DataView {\n        return this._value;\n    }\n\n    private handle: string = null;\n    private descriptors: Array<BluetoothRemoteGATTDescriptor> = null;\n\n    /**\n     * Characteristic constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTCharacteristic>) {\n        super();\n\n        this.service = init.service;\n        this.uuid = init.uuid;\n        this.properties = init.properties;\n        this._value = init.value;\n\n        this.handle = this.uuid;\n    }\n\n    private setValue(value?: DataView, emit?: boolean) {\n        this._value = value;\n        if (emit) {\n            this.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.device.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n            this.service.device._bluetooth.dispatchEvent(BluetoothRemoteGATTCharacteristic.EVENT_CHANGED, value);\n        }\n    }\n\n    /**\n     * Gets a single characteristic descriptor\n     * @param descriptor descriptor UUID\n     * @returns Promise containing the descriptor\n     */\n    public getDescriptor(descriptor: string | number): Promise<BluetoothRemoteGATTDescriptor> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptor error: device not connected\");\n            if (!descriptor) return reject(\"getDescriptor error: no descriptor specified\");\n\n            this.getDescriptors(descriptor)\n            .then(descriptors => {\n                if (descriptors.length !== 1) return reject(\"getDescriptor error: descriptor not found\");\n                resolve(descriptors[0]);\n            })\n            .catch(error =>  {\n                reject(`getDescriptor error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of the characteristic's descriptors\n     * @param descriptor descriptor UUID\n     * @returns Promise containing an array of descriptors\n     */\n    public getDescriptors(descriptor?: string | number): Promise<Array<BluetoothRemoteGATTDescriptor>> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"getDescriptors error: device not connected\");\n\n            function complete() {\n                if (!descriptor) return resolve(this.descriptors);\n\n                const filtered = this.descriptors.filter(descriptorObject => {\n                    return (descriptorObject.uuid === getDescriptorUUID(descriptor));\n                });\n\n                if (filtered.length !== 1) return reject(\"getDescriptors error: descriptor not found\");\n                resolve(filtered);\n            }\n\n            if (this.descriptors) return complete.call(this);\n\n            adapter.discoverDescriptors(this.handle, [], descriptors => {\n                this.descriptors = descriptors.map(descriptorInfo => {\n                    Object.assign(descriptorInfo, {\n                        characteristic: this\n                    });\n                    return new BluetoothRemoteGATTDescriptor(descriptorInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getDescriptors error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets the value of the characteristic\n     * @returns Promise containing the value\n     */\n    public readValue(): Promise<DataView> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"readValue error: device not connected\");\n\n            adapter.readCharacteristic(this.handle, dataView => {\n                this.setValue(dataView, true);\n                resolve(dataView);\n            }, error => {\n                reject(`readValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Updates the value of the characteristic\n     * @param value The value to write\n     */\n    public writeValue(value: ArrayBuffer | ArrayBufferView): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"writeValue error: device not connected\");\n\n            function isView(source: ArrayBuffer | ArrayBufferView): source is ArrayBufferView {\n                return (source as ArrayBufferView).buffer !== undefined;\n            }\n\n            const arrayBuffer = isView(value) ? value.buffer : value;\n            const dataView = new DataView(arrayBuffer);\n\n            adapter.writeCharacteristic(this.handle, dataView, () => {\n                this.setValue (dataView);\n                resolve();\n            }, error => {\n                reject(`writeValue error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Start notifications of changes for the characteristic\n     * @returns Promise containing the characteristic\n     */\n    public startNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"startNotifications error: device not connected\");\n\n            adapter.enableNotify(this.handle, dataView => {\n                this.setValue(dataView, true);\n            }, () => {\n                resolve(this);\n            }, error => {\n                reject(`startNotifications error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Stop notifications of changes for the characteristic\n     * @returns Promise containing the characteristic\n     */\n    public stopNotifications(): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.service.device.gatt.connected) return reject(\"stopNotifications error: device not connected\");\n\n            adapter.disableNotify(this.handle, () => {\n                resolve(this);\n            }, error => {\n                reject(`stopNotifications error: ${error}`);\n            });\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { BluetoothDevice } from \"./device\";\nimport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nimport { getCharacteristicUUID, getServiceUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Service class\n */\nexport class BluetoothRemoteGATTService extends EventDispatcher {\n\n    /**\n     * Service Added event\n     * @event\n     */\n    public static EVENT_ADDED: string = \"serviceadded\";\n\n    /**\n     * Service Changed event\n     * @event\n     */\n    public static EVENT_CHANGED: string = \"servicechanged\";\n\n    /**\n     * Service Removed event\n     * @event\n     */\n    public static EVENT_REMOVED: string = \"serviceremoved\";\n\n    /**\n     * The device the service is related to\n     */\n    public readonly device: BluetoothDevice = null;\n\n    /**\n     * The unique identifier of the service\n     */\n    public readonly uuid: string = null;\n\n    /**\n     * Whether the service is a primary one\n     */\n    public readonly isPrimary: boolean = false;\n\n    private handle: string = null;\n    private services: Array<BluetoothRemoteGATTService> = null;\n    private characteristics: Array<BluetoothRemoteGATTCharacteristic> = null;\n\n    /**\n     * Service constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothRemoteGATTService>) {\n        super();\n\n        this.device = init.device;\n        this.uuid = init.uuid;\n        this.isPrimary = init.isPrimary;\n\n        this.handle = this.uuid;\n\n        this.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n        this.device.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n        this.device._bluetooth.dispatchEvent(BluetoothRemoteGATTService.EVENT_ADDED);\n    }\n\n    /**\n     * Gets a single characteristic contained in the service\n     * @param characteristic characteristic UUID\n     * @returns Promise containing the characteristic\n     */\n    public getCharacteristic(characteristic: string | number): Promise<BluetoothRemoteGATTCharacteristic> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristic error: device not connected\");\n            if (!characteristic) return reject(\"getCharacteristic error: no characteristic specified\");\n\n            this.getCharacteristics(characteristic)\n            .then(characteristics => {\n                if (characteristics.length !== 1) return reject(\"getCharacteristic error: characteristic not found\");\n                resolve(characteristics[0]);\n            })\n            .catch(error => {\n                reject(`getCharacteristic error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of characteristics contained in the service\n     * @param characteristic characteristic UUID\n     * @returns Promise containing an array of characteristics\n     */\n    public getCharacteristics(characteristic?: string | number): Promise<Array<BluetoothRemoteGATTCharacteristic>> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getCharacteristics error: device not connected\");\n\n            function complete() {\n                if (!characteristic) return resolve(this.characteristics);\n\n                // Canonical-ize characteristic\n                characteristic = getCharacteristicUUID(characteristic);\n\n                const filtered = this.characteristics.filter(characteristicObject => {\n                    return (characteristicObject.uuid === characteristic);\n                });\n\n                if (filtered.length !== 1) return reject(\"getCharacteristics error: characteristic not found\");\n                resolve(filtered);\n            }\n\n            if (this.characteristics) return complete.call(this);\n\n            adapter.discoverCharacteristics(this.handle, [], characteristics => {\n                this.characteristics = characteristics.map(characteristicInfo => {\n                    Object.assign(characteristicInfo, {\n                        service: this\n                    });\n                    return new BluetoothRemoteGATTCharacteristic(characteristicInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getCharacteristics error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a single service included in the service\n     * @param service service UUID\n     * @returns Promise containing the service\n     */\n    public getIncludedService(service: string | number): Promise<BluetoothRemoteGATTService> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getIncludedService error: device not connected\");\n            if (!service) return reject(\"getIncludedService error: no service specified\");\n\n            this.getIncludedServices(service)\n            .then(services => {\n                if (services.length !== 1) return reject(\"getIncludedService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(error => {\n                reject(`getIncludedService error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of services included in the service\n     * @param service service UUID\n     * @returns Promise containing an array of services\n     */\n    public getIncludedServices(service?: string | number): Promise<Array<BluetoothRemoteGATTService>> {\n        return new Promise((resolve, reject) => {\n            if (!this.device.gatt.connected) return reject(\"getIncludedServices error: device not connected\");\n\n            function complete() {\n                if (!service) return resolve(this.services);\n\n                const filtered = this.services.filter(serviceObject => {\n                    return (serviceObject.uuid === getServiceUUID(service));\n                });\n\n                if (filtered.length !== 1) return reject(\"getIncludedServices error: service not found\");\n                resolve(filtered);\n            }\n\n            if (this.services) return complete.call(this);\n\n            adapter.discoverIncludedServices(this.handle, this.device._allowedServices, services => {\n                this.services = services.map(serviceInfo => {\n                    Object.assign(serviceInfo, {\n                        device: this.device\n                    });\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getIncludedServices error: ${error}`);\n            });\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { BluetoothDevice } from \"./device\";\nimport { BluetoothRemoteGATTService } from \"./service\";\nimport { getServiceUUID } from \"./helpers\";\nimport { adapter } from \"./adapter\";\n\n/**\n * Bluetooth Remote GATT Server class\n */\nexport class BluetoothRemoteGATTServer {\n\n    /**\n     * The device the gatt server is related to\n     */\n    public readonly device: BluetoothDevice = null;\n\n    private _connected: boolean = false;\n    /**\n     * Whether the gatt server is connected\n     */\n    public get connected(): boolean {\n        return this._connected;\n    }\n\n    private handle: string = null;\n    private services: Array<BluetoothRemoteGATTService> = null;\n\n    /**\n     * Server constructor\n     * @param device Device the gatt server relates to\n     */\n    constructor(device: BluetoothDevice) {\n        this.device = device;\n        this.handle = this.device.id;\n    }\n\n    /**\n     * Connect the gatt server\n     * @returns Promise containing the gatt server\n     */\n    public connect(): Promise<BluetoothRemoteGATTServer> {\n        return new Promise((resolve, reject) => {\n            if (this.connected) return reject(\"connect error: device already connected\");\n\n            adapter.connect(this.handle, () => {\n                this._connected = true;\n                resolve(this);\n            }, () => {\n                this.services = null;\n                this._connected = false;\n                this.device.dispatchEvent(BluetoothDevice.EVENT_DISCONNECTED);\n                this.device._bluetooth.dispatchEvent(BluetoothDevice.EVENT_DISCONNECTED);\n            }, error => {\n                reject(`connect Error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Disconnect the gatt server\n     */\n    public disconnect() {\n        adapter.disconnect(this.handle);\n        this._connected = false;\n    }\n\n    /**\n     * Gets a single primary service contained in the gatt server\n     * @param service service UUID\n     * @returns Promise containing the service\n     */\n    public getPrimaryService(service: string | number): Promise<BluetoothRemoteGATTService> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(\"getPrimaryService error: device not connected\");\n            if (!service) return reject(\"getPrimaryService error: no service specified\");\n\n            this.getPrimaryServices(service)\n            .then(services => {\n                if (services.length !== 1) return reject(\"getPrimaryService error: service not found\");\n                resolve(services[0]);\n            })\n            .catch(error => {\n                reject(`getPrimaryService error: ${error}`);\n            });\n        });\n    }\n\n    /**\n     * Gets a list of primary services contained in the gatt server\n     * @param service service UUID\n     * @returns Promise containing an array of services\n     */\n    public getPrimaryServices(service?: string | number): Promise<Array<BluetoothRemoteGATTService>> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(\"getPrimaryServices error: device not connected\");\n\n            function complete() {\n                if (!service) return resolve(this.services);\n\n                const filtered = this.services.filter(serviceObject => {\n                    return (serviceObject.uuid === getServiceUUID(service));\n                });\n\n                if (filtered.length !== 1) return reject(\"getPrimaryServices error: service not found\");\n                resolve(filtered);\n            }\n\n            if (this.services) return complete.call(this);\n\n            adapter.discoverServices(this.handle, this.device._allowedServices, services => {\n                this.services = services.map(serviceInfo => {\n                    Object.assign(serviceInfo, {\n                        device: this.device\n                    });\n                    return new BluetoothRemoteGATTService(serviceInfo);\n                });\n\n                complete.call(this);\n            }, error => {\n                reject(`getPrimaryServices error: ${error}`);\n            });\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { Bluetooth } from \"./bluetooth\";\nimport { BluetoothRemoteGATTServer } from \"./server\";\n\n/**\n * Bluetooth Device class\n */\nexport class BluetoothDevice extends EventDispatcher {\n\n    /**\n     * Server Disconnected event\n     * @event\n     */\n    public static EVENT_DISCONNECTED: string = \"gattserverdisconnected\";\n\n    /**\n     * Advertisement Received event\n     * @event\n     */\n    public static EVENT_ADVERT: string = \"advertisementreceived\";\n\n    /**\n     * The unique identifier of the device\n     */\n    public readonly id: string = null;\n\n    /**\n     * The name of the device\n     */\n    public readonly name: string = null;\n\n    /**\n     * The gatt server of the device\n     */\n    public readonly gatt: BluetoothRemoteGATTServer = null;\n\n    /**\n     * Whether adverts are being watched (not implemented)\n     */\n    public readonly watchingAdvertisements: boolean = false;\n\n    /**\n     * @hidden\n     */\n    public readonly adData: {\n        rssi?: number;\n        txPower?: number;\n        serviceData?: Map<string, DataView>;\n        manufacturerData?: Map<string, DataView>;\n    };\n\n    /**\n     * @hidden\n     */\n    public readonly _bluetooth: Bluetooth = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _allowedServices: Array<string> = [];\n\n    /**\n     * @hidden\n     */\n    public readonly _serviceUUIDs: Array<string> = [];\n\n    /**\n     * Device constructor\n     * @param init A partial class to initialise values\n     */\n    constructor(init: Partial<BluetoothDevice>) {\n        super();\n\n        this.id = init.id;\n        this.name = init.name;\n        this.gatt = init.gatt;\n        this.watchAdvertisements = init.watchAdvertisements;\n        this.adData = init.adData;\n\n        this._bluetooth = init._bluetooth;\n        this._allowedServices = init._allowedServices;\n        this._serviceUUIDs = init._serviceUUIDs;\n\n        if (!this.name) this.name = `Unknown or Unsupported Device (${this.id})`;\n        if (!this.gatt) this.gatt = new BluetoothRemoteGATTServer(this);\n    }\n\n    /**\n     * Starts watching adverts from this device (not implemented)\n     */\n    public watchAdvertisements(): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            reject(\"watchAdvertisements error: method not implemented\");\n        });\n    }\n\n    /**\n     * Stops watching adverts from this device (not implemented)\n     */\n    public unwatchAdvertisements() {\n        return new Promise((_resolve, reject) => {\n            reject(\"unwatchAdvertisements error: method not implemented\");\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { BluetoothDevice } from \"./device\";\nimport { getServiceUUID } from \"./helpers\";\nimport { adapter, NobleAdapter } from \"./adapter\";\n\n/**\n * Bluetooth Options interface\n */\nexport interface BluetoothOptions {\n    /**\n     * A `device found` callback function to allow the user to select a device\n     */\n    deviceFound?: (device: BluetoothDevice, selectFn: () => void) => boolean;\n\n    /**\n     * The amount of seconds to scan for the device (default is 10)\n     */\n    scanTime?: number;\n\n    /**\n     * An optional referring device\n     */\n    referringDevice?: BluetoothDevice;\n}\n\n/**\n * BluetoothLE Scan Filter Init interface\n */\nexport interface BluetoothLEScanFilterInit {\n    /**\n     * An array of service UUIDs to filter on\n     */\n    services?: Array<string | number>;\n\n    /**\n     * The device name to filter on\n     */\n    name?: string;\n\n    /**\n     * The device name prefix to filter on\n     */\n    namePrefix?: string;\n\n    // Maps unsigned shorts to BluetoothDataFilters.\n    // object manufacturerData;\n    // Maps BluetoothServiceUUIDs to BluetoothDataFilters.\n    // object serviceData;\n}\n\n/**\n * Request Device Options interface\n */\nexport interface RequestDeviceOptions {\n    /**\n     * An array of device filters to match\n     */\n    filters?: Array<BluetoothLEScanFilterInit>;\n\n    /**\n     * An array of optional services to have access to\n     */\n    optionalServices?: Array<string | number>;\n\n    /**\n     * Whether to accept all devices\n     */\n    acceptAllDevices?: boolean;\n}\n\n/**\n * Bluetooth class\n */\nexport class Bluetooth extends EventDispatcher {\n\n    /**\n     * Bluetooth Availability Changed event\n     * @event\n     */\n    public static EVENT_AVAILABILITY: string = \"availabilitychanged\";\n\n    /**\n     * Referring device for the bluetooth instance\n     */\n    public readonly referringDevice?: BluetoothDevice;\n\n    private deviceFound: (device: BluetoothDevice, selectFn: () => void) => boolean = null;\n    private scanTime: number = 10.24 * 1000;\n    private scanner = null;\n\n    /**\n     * Bluetooth constructor\n     * @param options Bluetooth initialisation options\n     */\n    constructor(options?: BluetoothOptions) {\n        super();\n\n        options = options || {};\n        this.referringDevice = options.referringDevice;\n        this.deviceFound = options.deviceFound;\n        if (options.scanTime) this.scanTime = options.scanTime * 1000;\n\n        adapter.on(NobleAdapter.EVENT_ENABLED, value => {\n            this.dispatchEvent(Bluetooth.EVENT_AVAILABILITY, value);\n        });\n    }\n\n    private filterDevice(options: RequestDeviceOptions, deviceInfo, validServices) {\n        let valid = false;\n\n        options.filters.forEach(filter => {\n            // Name\n            if (filter.name && filter.name !== deviceInfo.name) return;\n\n            // NamePrefix\n            if (filter.namePrefix) {\n                if (!deviceInfo.name || filter.namePrefix.length > deviceInfo.name.length) return;\n                if (filter.namePrefix !== deviceInfo.name.substr(0, filter.namePrefix.length)) return;\n            }\n\n            // Services\n            if (filter.services) {\n                const serviceUUIDs = filter.services.map(getServiceUUID);\n                const servicesValid = serviceUUIDs.every(serviceUUID => {\n                    return (deviceInfo._serviceUUIDs.indexOf(serviceUUID) > -1);\n                });\n\n                if (!servicesValid) return;\n                validServices = validServices.concat(serviceUUIDs);\n            }\n\n            valid = true;\n        });\n\n        if (!valid) return false;\n        return deviceInfo;\n    }\n\n    /**\n     * Gets the availability of a bluetooth adapter\n     * @returns Promise containing a flag indicating bluetooth availability\n     */\n    public getAvailability(): Promise<boolean> {\n        return new Promise((resolve, _reject) => {\n            adapter.getEnabled(enabled => {\n                resolve(enabled);\n            });\n        });\n    }\n\n    /**\n     * Scans for a device matching optional filters\n     * @param options The options to use when scanning\n     * @returns Promise containing a device which matches the options\n     */\n    public requestDevice(options?: RequestDeviceOptions): Promise<BluetoothDevice> {\n        return new Promise((resolve, reject) => {\n            options = options || {};\n\n            if (this.scanner !== null) return reject(\"requestDevice error: request in progress\");\n\n            if (!options.acceptAllDevices && !this.deviceFound) {\n                // Must have a filter\n                if (!options.filters || options.filters.length === 0) {\n                    return reject(new TypeError(\"requestDevice error: no filters specified\"));\n                }\n\n                // Don't allow empty filters\n                const emptyFilter = options.filters.some(filter => {\n                    return (Object.keys(filter).length === 0);\n                });\n                if (emptyFilter) {\n                    return reject(new TypeError(\"requestDevice error: empty filter specified\"));\n                }\n\n                // Don't allow empty namePrefix\n                const emptyPrefix = options.filters.some(filter => {\n                    return (typeof filter.namePrefix !== \"undefined\" && filter.namePrefix === \"\");\n                });\n                if (emptyPrefix) {\n                    return reject(new TypeError(\"requestDevice error: empty namePrefix specified\"));\n                }\n            }\n\n            let searchUUIDs = [];\n\n            if (options.filters) {\n                options.filters.forEach(filter => {\n                    if (filter.services) searchUUIDs = searchUUIDs.concat(filter.services.map(getServiceUUID));\n                });\n            }\n\n            // Unique-ify\n            searchUUIDs = searchUUIDs.filter((item, index, array) => {\n                return array.indexOf(item) === index;\n            });\n\n            let found = false;\n            adapter.startScan(searchUUIDs, deviceInfo => {\n                let validServices = [];\n\n                function complete(bluetoothDevice) {\n                    this.cancelRequest()\n                    .then(() => {\n                        resolve(bluetoothDevice);\n                    });\n                }\n\n                // filter devices if filters specified\n                if (options.filters) {\n                    deviceInfo = this.filterDevice(options, deviceInfo, validServices);\n                }\n\n                if (deviceInfo) {\n                    found = true;\n\n                    // Add additional services\n                    if (options.optionalServices) {\n                        validServices = validServices.concat(options.optionalServices.map(getServiceUUID));\n                    }\n\n                    // Set unique list of allowed services\n                    const allowedServices = validServices.filter((item, index, array) => {\n                        return array.indexOf(item) === index;\n                    });\n                    Object.assign(deviceInfo, {\n                        _bluetooth: this,\n                        _allowedServices: allowedServices\n                    });\n\n                    const bluetoothDevice = new BluetoothDevice(deviceInfo);\n\n                    function selectFn() {\n                        complete.call(this, bluetoothDevice);\n                    }\n\n                    if (!this.deviceFound || this.deviceFound(bluetoothDevice, selectFn.bind(this)) === true) {\n                        // If no deviceFound function, or deviceFound returns true, resolve with this device immediately\n                        complete.call(this, bluetoothDevice);\n                    }\n                }\n            }, () => {\n                this.scanner = setTimeout(() => {\n                    this.cancelRequest()\n                    .then(() => {\n                        if (!found) reject(\"requestDevice error: no devices found\");\n                    });\n                }, this.scanTime);\n            }, error => reject(`requestDevice error: ${error}`));\n        });\n    }\n\n    /**\n     * Cancels the scan for devices\n     */\n    public cancelRequest(): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            if (this.scanner) {\n                clearTimeout(this.scanner);\n                this.scanner = null;\n                adapter.stopScan();\n            }\n            resolve();\n        });\n    }\n}\n","/*\n* Node Web Bluetooth\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { Bluetooth } from \"./bluetooth\";\n\n/**\n * Default bluetooth instance synonymous with `navigator.bluetooth`\n */\nexport const bluetooth = new Bluetooth();\n\n/**\n * Helper methods and enums\n */\nexport * from \"./helpers\";\n\n/**\n * Bluetooth class for creating new instances\n */\nexport { Bluetooth };\n\n/**\n * Other classes if required\n */\nexport { BluetoothDevice } from \"./device\";\nexport { BluetoothRemoteGATTServer } from \"./server\";\nexport { BluetoothRemoteGATTService } from \"./service\";\nexport { BluetoothRemoteGATTCharacteristic } from \"./characteristic\";\nexport { BluetoothRemoteGATTDescriptor } from \"./descriptor\";\n"],"names":["bluetoothServices","bluetoothCharacteristics","bluetoothDescriptors","EventHandlers","EventEmitter","init","call","this","$getMaxListeners","that","undefined","_maxListeners","defaultMaxListeners","emitNone","handler","isFn","self","len","length","listeners","arrayClone","i","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","args","apply","_addListener","target","type","listener","prepend","m","events","existing","e","TypeError","_events","newListener","emit","_eventsCount","unshift","push","warned","w","Error","name","emitter","count","console","warn","log","_onceWrap","fired","g","removeListener","arguments","listenerCount","evlistener","arr","copy","Array","prototype","Object","create","usingDomains","domain","active","Domain","getPrototypeOf","setMaxListeners","n","isNaN","getMaxListeners","er","doError","error","err","context","domainEmitter","domainThrown","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","index","k","pop","spliceOne","removeAllListeners","key","keys","ret","unwrapListeners","eventNames","Reflect","ownKeys","EventDispatcher","[object Object]","event","super","value","getCanonicalUUID","uuid","toString","toLowerCase","slice","match","splice","join","getServiceUUID","service","getCharacteristicUUID","characteristic","getDescriptorUUID","descriptor","NobleAdapter","enabled","state","noble.on","EVENT_ENABLED","noble.state","completeFn","initialised","deviceInfo","discoverFn","errorFn","continueFn","delay","setTimeout","buffer","arrayBuffer","Uint8Array","DataView","dataView","typedArray","Buffer","serviceUUIDs","advertisement","serviceUuids","advertisedUUIDs","map","serviceUUID","some","indexOf","deviceID","address","id","forEach","manufacturerData","Map","company","readUInt16LE","set","bufferToDataView","serviceData","serviceAdvert","data","localName","_serviceUUIDs","adData","rssi","txPower","txPowerLevel","stateCB","noble[\"once\"]","bind","foundFn","validDevice","device","deviceToBluetoothDevice","deviceHandles","noble.startScanning","checkForError","_errorFn","noble.stopScanning","handle","connectFn","disconnectFn","baseDevice","serviceHandles","characteristicHandles","descriptorHandles","charNotifies","connect","disconnect","discoverServices","services","discovered","serviceInfo","primary","discoverIncludedServices","characteristicUUIDs","discoverCharacteristics","characteristics","characteristicInfo","charUUID","properties","broadcast","read","writeWithoutResponse","write","notify","indicate","authenticatedSignedWrites","reliableWrite","writableAuxiliaries","isNotification","descriptorUUIDs","discoverDescriptors","descriptors","descriptorInfo","descUUID","descHandle","dataViewToBuffer","withoutResponse","os","notifyFn","readValue","writeValue","adapter","BluetoothRemoteGATTDescriptor","_value","Promise","resolve","reject","gatt","connected","readDescriptor","source","isView","writeDescriptor","BluetoothRemoteGATTCharacteristic","dispatchEvent","EVENT_CHANGED","_bluetooth","getDescriptors","then","catch","complete","filtered","filter","descriptorObject","assign","readCharacteristic","setValue","writeCharacteristic","enableNotify","disableNotify","BluetoothRemoteGATTService","isPrimary","EVENT_ADDED","getCharacteristics","characteristicObject","getIncludedServices","serviceObject","_allowedServices","BluetoothRemoteGATTServer","_connected","BluetoothDevice","EVENT_DISCONNECTED","getPrimaryServices","watchAdvertisements","_resolve","Bluetooth","options","referringDevice","deviceFound","scanTime","EVENT_AVAILABILITY","validServices","valid","filters","namePrefix","substr","every","concat","_reject","getEnabled","scanner","acceptAllDevices","searchUUIDs","item","array","found","startScan","bluetoothDevice","cancelRequest","filterDevice","optionalServices","allowedServices","selectFn","clearTimeout","stopScan","bluetooth"],"mappings":"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AA,0CACAA,8CACAA,4CACAA,wEACAA,sCACAA,wCACAA,gEACAA,kDACAA,wDACAA,0CACAA,gDACAA,4BACAA,kDACAA,kCACAA,0DACAA,4CACAA,kDACAA,gEACAA,gCACAA,4DACAA,4CACAA,kDACAA,0CACAA,wDACAA,gEACAA,4CACAA,8BACAA,gCACAA,uCAMQC,EAAAA,6BAAAA,yGAERA,2EACAA,iDACAA,qBACAA,iCACAA,iDACAA,mEACAA,qCACAA,+EACAA,uCACAA,+BACAA,+EACAA,+EACAA,qDACAA,2BACAA,6DACAA,qDACAA,8CACAA,iEACAA,yCACAA,2DACAA,mEACAA,+DACAA,uEACAA,uDACAA,yEACAA,6DACAA,mEACAA,qEACAA,6DACAA,8FACAA,qCACAA,6CACAA,uDACAA,2DACAA,2EACAA,mCACAA,qCACAA,6CACAA,uCACAA,qEACAA,yDACAA,iEACAA,uDACAA,iEACAA,yCACAA,uEACAA,iCACAA,yCACAA,qCACAA,+DACAA,gDACAA,iCACAA,6BACAA,mCACAA,iCACAA,yCACAA,2CACAA,6EACAA,6EACAA,+DACAA,mCACAA,qEACAA,uCACAA,2BACAA,6CACAA,qDACAA,qEACAA,qCACAA,+DACAA,+DACAA,2CACAA,2DACAA,mCACAA,2BACAA,iDACAA,6CACAA,iDACAA,+BACAA,wHACAA,+EACAA,qEACAA,+DACAA,mCACAA,+BACAA,iCACAA,+BACAA,+CACAA,mCACAA,oEACAA,2DACAA,2DACAA,mDACAA,yCACAA,iCACAA,uDACAA,+DACAA,+DACAA,+DACAA,2EACAA,uDACAA,qDACAA,mCACAA,iCACAA,8GACAA,wEACAA,mEACAA,uCACAA,mEACAA,2BACAA,uDACAA,+CACAA,+BACAA,yCACAA,+BACAA,kEACAA,qEACAA,mEACAA,2BACAA,mCACAA,mDACAA,uDACAA,2CACAA,qCACAA,6CACAA,+CACAA,uDACAA,uCACAA,6CACAA,uDACAA,0DACAA,+DACAA,6GACAA,uEACAA,6EACAA,iCACAA,qCACAA,6DACAA,+CACAA,uEACAA,y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"}